#include "../include.h"
#include "FSM.h"
uint8_t redCounter = 0;
uint8_t greenCounter = 0;
uint8_t redFlag = 0;
uint8_t greenFlag = 0;
uint16_t ledTimer = 0;
enum ledNumber{LEDRED=0,LEDGREEN,LEDBLUE};
enum ledState{OFF=0,ON};
typedef enum SW{PRESSED,RELEASED} sw_t;
const uint8_t ledPin[3]={0x02,0x04,0x08};
void ledControl(enum ledNumber led,enum ledState State){
    if(State){
        GPIO_PORTF_DATA_R |= ledPin[led];
    }
    else{
        GPIO_PORTF_DATA_R &= ~ledPin[led];
    }
}
sw_t switchState(SWnumber){
    switch(SWnumber){
    case 1:
        if(~GPIO_PORTF_DATA_R&0x10){
            return PRESSED;
        }
        else{
            return RELEASED;
        }
    case 2:
        if(~GPIO_PORTF_DATA_R&0x01){
            return PRESSED;
        }
        else{
            return RELEASED;
        }
    default: return PRESSED;
    }
}
//////////////////////////////////////////RED//////////////////////////////////////////////////
typedef enum {S1=0,S2,S3,S4} State_Red;
static State_Red State_R = S1;
void ledRedStateMachineUpdate(void){
    switch(State_R){
    case S1:
        if(switchState(1)==PRESSED){
            State_R = S2;
            ledTimer = 1000;
        }
        break;
    case S2:
        if(switchState(1)==RELEASED){
            State_R = S3;
            ledTimer = 1000;
        }
        break;
    case S3:
        if(switchState(1)==PRESSED){
            State_R = S4;
            ledTimer = 1000;
        }
        break;
    case S4:
        if(switchState(1)==RELEASED){
            State_R = S1;
            ledTimer = 1000;
        }
        break;
    }
    switch(State_R){
    case S1:
    case S4:
        ledControl(LEDRED,OFF);
        break;
    case S2:
    case S3:
        ledControl(LEDRED,ON);
        break;
    }
}
////////////////////////////////////////////////GREEN//////////////////////////////////////////////////
typedef enum {S_1=0,S_2,S_3,S_4,S_5,S_6} State_Green;
static State_Green State_G;
void ledGreenStateMachineUpdate(void){
    switch(State_G){
    case S_1:
        if(switchState(2)==PRESSED){
            State_G = S_2;
            ledTimer = 3000;
        }
        break;
    case S_2:
        if(switchState(2)==RELEASED){
            State_G = S_1;
        }
        else if(ledTimer==0){
            State_G = S_3;
        }
        break;
    case S_3:
        if(switchState(2)==RELEASED){
            State_G = S_4;
        }
        break;
    case S_4:
        if(switchState(2)==PRESSED){
            State_G = S_5;
            ledTimer = 6000;
        }
        break;
    case S_5:
        if(switchState(2)==RELEASED){
            State_G = S_4;
        }
        else if(ledTimer==0){
            State_G = S_6;
        }
        break;
    case S_6:
        if(switchState(2)==RELEASED){
            State_G = S_1;
        }
        break;
    }
    switch(State_G){
    case S_1:
    case S_2:
    case S_6:
        ledControl(LEDGREEN,OFF);
        break;
    case S_3:
    case S_4:
    case S_5:
        ledControl(LEDGREEN,ON);
    }
}

